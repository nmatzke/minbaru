# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf#
chardf_bdist_read = chardf#
chardf_bdist_read#
chardf#
dim(chardf)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
head(chardf)
colSums(chardf == "?")
taxic_relevance
if (alphabetize == TRUE)#
		{#
		species_names = names(chardf)#
		new_order = order(species_names)#
		chardf = chardf[,new_order]#
		} # END if (alphabetize == TRUE)#
	# Be sure to re-initialize species names:#
	species_names = names(chardf)#
	# Taxic relevance before character cutoffs#
	TF1 = chardf == "?"#
	TF2 = chardf == "-"#
	TF = TF1 + TF2#
	taxic_relevance_rawdata = 1 - (colSums(TF) / (rep(nrow(chardf), times=ncol(chardf))))#
	########################################################
	# Character relevance -- only "?" or "-" are irrelevant#
	# (I guess)#
	########################################################
	TF1 = chardf == "?"#
	TF2 = chardf == "-"#
	TF = TF1 + TF2#
	relevance = 1 - (rowSums(TF) / (rep(ncol(chardf), times=nrow(chardf))))#
	relevance#
#
	########################################################
	# Use characters?#
	########################################################
	#min_char_relevance = 0.95#
	include_TF = relevance >= min_char_relevance#
	#chardf = chardf[include_TF,]#
	if ( (sum(include_TF=FALSE)>0) && printflag )#
		{#
		cat("\read_bdist_to_chardf() says: ", sum(include_TF), "/", length(include_TF), " characters have completeness less than min_char_relevance=", min_char_relevance, " (a<", min_char_relevance, "). You should cut these (if you want to replicate bdist).")#
		cat("\n")#
		}#
#
	# Taxic relevance after character cutoffs#
	TF1 = chardf == "?"#
	TF2 = chardf == "-"#
	TF = TF1 + TF2#
	taxic_relevance_subset_data = 1 - (colSums(TF) / (rep(nrow(chardf), times=ncol(chardf))))#
	# Don't cut -- the user should make that decision deliberately#
	#keep_taxa_TF = taxic_relevance > min_taxic_relevance#
	#chardf = chardf[, keep_taxa_TF]#
	# Make a table of taxic_relevance#
	min_taxic_relevance_list = rep(min_taxic_relevance, times=length(species_names))#
	taxic_rel_raw_above_cutoff_TF = taxic_relevance_rawdata > min_taxic_relevance_list#
	taxic_rel_subset_above_cutoff_TF = taxic_relevance_subset_data > min_taxic_relevance_list#
	taxic_relevance = cbind(1:length(species_names), species_names, min_taxic_relevance_list, taxic_relevance_rawdata, taxic_relevance_subset_data, taxic_rel_raw_above_cutoff_TF, taxic_rel_subset_above_cutoff_TF)#
	taxic_relevance = as.data.frame(taxic_relevance, stringsAsFactors=FALSE)#
	names(taxic_relevance) = c("num", "name", "minTaxicRel", "TaxicRel_raw", "TaxicRel_subset", "raw_aboveTF", "subset_aboveTF")
min_char_relevance=0.75#
	min_taxic_relevance=0#
	alphabetize=TRUE
if (alphabetize == TRUE)#
		{#
		species_names = names(chardf)#
		new_order = order(species_names)#
		chardf = chardf[,new_order]#
		} # END if (alphabetize == TRUE)#
	# Be sure to re-initialize species names:#
	species_names = names(chardf)#
	# Taxic relevance before character cutoffs#
	TF1 = chardf == "?"#
	TF2 = chardf == "-"#
	TF = TF1 + TF2#
	taxic_relevance_rawdata = 1 - (colSums(TF) / (rep(nrow(chardf), times=ncol(chardf))))#
	########################################################
	# Character relevance -- only "?" or "-" are irrelevant#
	# (I guess)#
	########################################################
	TF1 = chardf == "?"#
	TF2 = chardf == "-"#
	TF = TF1 + TF2#
	relevance = 1 - (rowSums(TF) / (rep(ncol(chardf), times=nrow(chardf))))#
	relevance#
#
	########################################################
	# Use characters?#
	########################################################
	#min_char_relevance = 0.95#
	include_TF = relevance >= min_char_relevance#
	#chardf = chardf[include_TF,]#
	if ( (sum(include_TF=FALSE)>0) && printflag )#
		{#
		cat("\read_bdist_to_chardf() says: ", sum(include_TF), "/", length(include_TF), " characters have completeness less than min_char_relevance=", min_char_relevance, " (a<", min_char_relevance, "). You should cut these (if you want to replicate bdist).")#
		cat("\n")#
		}#
#
	# Taxic relevance after character cutoffs#
	TF1 = chardf == "?"#
	TF2 = chardf == "-"#
	TF = TF1 + TF2#
	taxic_relevance_subset_data = 1 - (colSums(TF) / (rep(nrow(chardf), times=ncol(chardf))))#
	# Don't cut -- the user should make that decision deliberately#
	#keep_taxa_TF = taxic_relevance > min_taxic_relevance#
	#chardf = chardf[, keep_taxa_TF]#
	# Make a table of taxic_relevance#
	min_taxic_relevance_list = rep(min_taxic_relevance, times=length(species_names))#
	taxic_rel_raw_above_cutoff_TF = taxic_relevance_rawdata > min_taxic_relevance_list#
	taxic_rel_subset_above_cutoff_TF = taxic_relevance_subset_data > min_taxic_relevance_list#
	taxic_relevance = cbind(1:length(species_names), species_names, min_taxic_relevance_list, taxic_relevance_rawdata, taxic_relevance_subset_data, taxic_rel_raw_above_cutoff_TF, taxic_rel_subset_above_cutoff_TF)#
	taxic_relevance = as.data.frame(taxic_relevance, stringsAsFactors=FALSE)#
	names(taxic_relevance) = c("num", "name", "minTaxicRel", "TaxicRel_raw", "TaxicRel_subset", "raw_aboveTF", "subset_aboveTF")
taxic_relevance
# Taxic relevance after character cutoffs#
	TF1 = chardf == "?"#
	TF2 = chardf == "-"#
	TF = TF1 + TF2#
	numQs_per_species = colSums(TF)
numQs_per_species
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
readres
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
readres
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
readres
readres$stats_table$include_TF
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
bdists_bdist_pl
bdists_minbaru
chardf
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)
readres$chardf[,readres$taxic_relevance$relTF]
readres$taxic_relevance$relTF
readres$taxic_relevance
dfnums_to_numeric
readres$taxic_relevance
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,as.logical(readres$taxic_relevance$relTF)]#
chardf = chardf[readres$stats_table$include_TF,]
chardf
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
chardf
dim(chardf)
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)
chardf
dim(readres$chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)#
chardf = readres$chardf[,relevance_res$taxic_relevance$relTF]#
chardf = chardf[relevance_res$stats_table$include_TF,]#
dim(chardf)#
#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)#
chardf = chardf[,relevance_res$taxic_relevance$relTF]#
chardf = chardf[relevance_res$stats_table$include_TF,]#
dim(chardf)
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)
relevance_res
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)
relevance_res
relevance_res$stats_table_sub$include_TF
sum(relevance_res$stats_table_sub$include_TF)
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)#
chardf = chardf[,relevance_res$taxic_relevance$relTF]#
chardf = chardf[relevance_res$stats_table_sub$include_TF,]#
dim(chardf)
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
chardf
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)#
chardf = chardf[,relevance_res$taxic_relevance$relTF]#
chardf = chardf[relevance_res$stats_table_sub$include_TF,]#
dim(chardf)
bdist_chardf#
chardf
bdist_chardf == chardf
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)#
chardf = chardf[,relevance_res$taxic_relevance$relTF]#
chardf = chardf[relevance_res$stats_table_sub$include_TF,]#
dim(chardf)#
#
TF = bdist_chardf == chardf#
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE)#
chardf = chardf[,relevance_res$taxic_relevance$relTF]#
chardf = chardf[relevance_res$stats_table_sub$include_TF,]#
dim(chardf)
head(bdist_chardf)#
head(chardf)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
subboth_chardf = relevance_res$subboth_chardf#
dim(subboth_chardf)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE)#
dim(chardf)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
subboth_chardf = relevance_res$subboth_chardf#
dim(subboth_chardf)
head(bdist_chardf)#
head(subboth_chardf)
TF = bdist_chardf == chardf
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
TF = bdist_chardf == chardf
TF
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
?expect_identical
differences = abs(bdists_minbaru - bdists_bdist_pl)#
#
# Run the test#
expect_lt(object=differences, expected=0.025)
differences_TF = abs(bdists_minbaru - bdists_bdist_pl) < 0.025#
#
# Run the test#
expect_true(object=differences_TF)
differences_TF
sum(differences_TF)
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=FALSE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE)
read_nexus_data2()
TF1 = bdist_chardf == "01"#
TF2 = chardf == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)
rownums_table = matrix(data=1:nrow(chardf), nrow=nrow(chardf), ncol=ncol(chardf), byrow=FALSE)#
colnums_table = matrix(data=1:ncol(chardf), nrow=nrow(chardf), ncol=ncol(chardf), byrow=TRUE)#
rownums_table[TF]#
colnums_table[TF]
TF1 = bdist_chardf == "01"#
TF2 = chardf == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)#
#
rownums_table = matrix(data=1:nrow(chardf), nrow=nrow(chardf), ncol=ncol(chardf), byrow=FALSE)#
colnums_table = matrix(data=1:ncol(chardf), nrow=nrow(chardf), ncol=ncol(chardf), byrow=TRUE)#
rownums_table[TF]#
# 83#
colnums_table[TF]#
#10#
bdist_chardf[83,]#
chardf[83,]
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf
dim(bdist_chardf_orig)
colnames(chardf)
names(chardf)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE#
chardf_orig = chardf#
dim(chardf)
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
chardf_orig = chardf#
dim(chardf_orig)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
chardf_orig = relevance_res$subtaxa_chardf#
dim(chardf_orig)
head()
TF1 = bdist_chardf_orig == "01"#
TF2 = chardf_org == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)
TF1 = bdist_chardf_orig == "01"#
TF2 = chardf_oirg == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)
TF1 = bdist_chardf_orig == "01"#
TF2 = chardf_orig == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)
rownums_table = matrix(data=1:nrow(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=FALSE)#
colnums_table = matrix(data=1:ncol(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=TRUE)#
rownums_table[TF]#
# 83#
colnums_table[TF]
head(bdist_chardf_orig)#
head(chardf_orig)
head(bdist_chardf_orig)#
head(chardf_orig)#
TFx = bdist_chardf_orig == chardf_orig#
sum(TFx == FALSE)
TF1 = bdist_chardf_orig == "01"#
TF2 = chardf_orig == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)#
#
rownums_table = matrix(data=1:nrow(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=FALSE)#
colnums_table = matrix(data=1:ncol(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=TRUE)#
rownums_table[TF]#
# 124#
colnums_table[TF]
head(bdist_chardf_orig)#
head(chardf_orig)#
TFx = bdist_chardf_orig == chardf_orig#
sum(TFx == FALSE)#
#
TF1 = bdist_chardf_orig == "01"#
TF2 = chardf_orig == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)#
#
rownums_table = matrix(data=1:nrow(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=FALSE)#
colnums_table = matrix(data=1:ncol(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=TRUE)#
rownums_table[TF]#
# 124#
colnums_table[TF]#
#10#
bdist_chardf[124,]#
chardf[124,]
bdist_chardf_orig[124,]#
chardf_orig[124,]
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
chardf_orig = relevance_res$subtaxa_chardf#
dim(chardf_orig)#
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
TF = bdist_chardf == chardf#
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])#
#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Are all of the differences below 0.025?#
# (These minor differences are probably due to #
#  auto-recoding of the dataset by read_nexus_data2. The only #
#  one that is concerning is #
#  [68,] "01"  "012"#
# #
#
head(bdist_chardf_orig)#
head(chardf_orig)#
TFx = bdist_chardf_orig == chardf_orig#
sum(TFx == FALSE)#
#
TF1 = bdist_chardf_orig == "01"#
TF2 = chardf_orig == "012"#
TF = (TF1 + TF2) == 2#
sum(TF)#
#
rownums_table = matrix(data=1:nrow(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=FALSE)#
colnums_table = matrix(data=1:ncol(chardf_orig), nrow=nrow(chardf_orig), ncol=ncol(chardf_orig), byrow=TRUE)#
rownums_table[TF]#
# 124 (83 in subset)#
colnums_table[TF]#
#10#
bdist_chardf_orig[124,]#
chardf_orig[124,]
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
chardf_orig = relevance_res$subtaxa_chardf#
dim(chardf_orig)#
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
TF = bdist_chardf == chardf#
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru- bdists_bdist_pl
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
chardf_orig = relevance_res$subtaxa_chardf#
dim(chardf_orig)#
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
TF = bdist_chardf == chardf#
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])#
#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)
res
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100)
res
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100)#
res
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100, printflag=FALSE)#
res
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100, printflag=TRUE)#
res#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)
res
getwd()
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/examples/"#
setwd(wd)#
#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100, printflag=TRUE)#
res#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)#
res$bootstrap_freqs_pLT05#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
########################################################
# Make some plots#
########################################################
Wood_2016_Fig1_order = c("P_robustus", "P_boisei", "H_rudolfensis", "H_habilis", "H_neanderthalensis", "H_ergaster", "H_sapiens", "H_heidelbergensis", "H_erectus", "A_africanus", "Pan_troglodytes",  "Gorilla_gorilla", "A_afarensis")#
Wood_2016_Fig1_order_nums = match(x=Wood_2016_Fig1_order, table=rownames(res$bdist_cor_Ps))#
new_order=Wood_2016_Fig1_order_nums
runslow = FALSE#
resfn = "ex4_Dembo_Matzke_etal_for_bdist_subset_result.Rdata"
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)#
	# Loads to res#
	save(res, file=resfn)
res$bootstrap_freqs_pLT05#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
########################################################
# Make some plots#
########################################################
Wood_2016_Fig1_order = c("P_robustus", "P_boisei", "H_rudolfensis", "H_habilis", "H_neanderthalensis", "H_ergaster", "H_sapiens", "H_heidelbergensis", "H_erectus", "A_africanus", "Pan_troglodytes",  "Gorilla_gorilla", "A_afarensis")#
Wood_2016_Fig1_order_nums = match(x=Wood_2016_Fig1_order, table=rownames(res$bdist_cor_Ps))#
new_order=Wood_2016_Fig1_order_nums
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap")#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL)#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums)
heatmap(t(res$cormat))
?par
?mtest
?mtext
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/examples/"#
setwd(wd)#
#
# Check that math works#
cat("\n\n")#
cat("=========================BEGINNING TESTS=========================\n\n")#
cat("TESTING THAT MATH WORKS...")#
expect_that(1 ^ 1, equals(1))#
expect_that(2 ^ 2, equals(4))#
expect_that(2 + 2 == 4, is_true())#
expect_that(2 == 1, is_false())#
#
# Classes, printing#
expect_that(1, is_a('numeric'))#
expect_that(print('Hello World!'), prints_text('Hello World!'))#
expect_that(log('a'), throws_error())#
#
# Speed (deprecated)#
expect_that(factorial(16), takes_less_than(1))#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (correcting data as in NEXUS)...")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
#min_char_relevance=0; min_taxic_relevance=0; correct_numeric_above_10=TRUE; correct_w_get_numstates_per_char=TRUE; return_list=TRUE; alphabetize=TRUE; printflag=TRUE#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres#
#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "0", "0", "1", "23"), #
    freddie = c("0", "01", "1", "0", "0", "1", "01"), scooby = c("1", #
    "0", "2", "0", "1", "1", "1"), shaggy = c("0", "1", "0", #
    "2", "2", "0", "01"), velma = c("0", "01", "2", "1", "12", #
    "0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
cat("TESTING THAT READING BDIST FILES WORKS (NOT correcting data as in NEXUS)...")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# and 12, 13, 14 is a valid character pattern#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=FALSE, correct_w_get_numstates_per_char=FALSE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE)#
readres_txt = dput(readres$chardf)#
correct_txt = structure(list(daphne = c("0", "0", "2", "12", "0", "1", "(23)"#
), freddie = c("0", "(10)", "1", "12", "0", "1", "(01)"), scooby = c("1", #
"0", "2", "12", "1", "1", "1"), shaggy = c("0", "1", "0", "14", #
"2", "0", "(01)"), velma = c("0", "(01)", "2", "13", "(12)", #
"0", "?")), .Names = c("daphne", "freddie", "scooby", "shaggy", #
"velma"), row.names = c(NA, 7L), class = "data.frame")#
#
# Run the test#
expect_identical(object=readres_txt, expected=correct_txt)#
cat("...DONE\n")#
# Read in an example file, leaving it as original #
# from the example (e.g., "10" different from "01"),#
# except that 12, 13, 14 are converted to B, C, D#
# Then do "literal" (standard) bdist#
#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex1_from_bdist_online.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex1_from_bdist_online.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.95, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100, printflag=TRUE)#
res#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdist_pl_output_txt='	daphne	freddie	scooby	shaggy	velma#
daphne	0.000	0.167	0.333	0.833	0.500#
freddie	0.167	0.000	0.500	0.667	0.667#
scooby	0.333	0.500	0.000	1.000	0.500#
shaggy	0.833	0.667	1.000	0.000	0.333#
velma	0.500	0.667	0.500	0.333	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex4_Dembo_Matzke_etal_for_bdist_subset.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex4_Dembo_Matzke_etal_for_bdist_subset.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0.75, min_taxic_relevance=0.0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
dim(readres$chardf)#
bdist_chardf_orig = readres$chardf#
dim(bdist_chardf_orig)#
#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
dim(chardf)#
bdist_chardf = chardf#
res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE)#
#
runslow = FALSE#
resfn = "ex4_Dembo_Matzke_etal_for_bdist_subset_result.Rdata"#
if (runslow)#
	{#
	res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)#
	# Loads to res#
	save(res, file=resfn)#
	} else {#
	# Loads to res#
	load(file=resfn)#
	} # END if (runslow)#
res$bootstrap_freqs_pLT05#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
#
bdist_pl_output_txt='	A_afarensis	A_africanus	Gorilla_gorilla	H_erectus	H_ergaster	H_habilis	H_heidelbergensis	H_neanderthalensis	H_rudolfensis	H_sapiens	P_boisei	P_robustus	Pan_troglodytes#
A_afarensis	0.000	0.287	0.328	0.348	0.346	0.346	0.346	0.383	0.369	0.434	0.552	0.553	0.304#
A_africanus	0.287	0.000	0.371	0.242	0.284	0.239	0.304	0.292	0.261	0.333	0.431	0.412	0.296#
Gorilla_gorilla	0.328	0.371	0.000	0.360	0.428	0.392	0.312	0.340	0.506	0.468	0.456	0.619	0.155#
H_erectus	0.348	0.242	0.360	0.000	0.111	0.176	0.063	0.162	0.120	0.092	0.391	0.373	0.303#
H_ergaster	0.346	0.284	0.428	0.111	0.000	0.147	0.134	0.198	0.130	0.098	0.431	0.370	0.352#
H_habilis	0.346	0.239	0.392	0.176	0.147	0.000	0.205	0.274	0.130	0.207	0.431	0.361	0.352#
H_heidelbergensis	0.346	0.304	0.312	0.063	0.134	0.205	0.000	0.105	0.167	0.054	0.291	0.412	0.243#
H_neanderthalensis	0.383	0.292	0.340	0.162	0.198	0.274	0.105	0.000	0.236	0.151	0.346	0.379	0.305#
H_rudolfensis	0.369	0.261	0.506	0.120	0.130	0.130	0.167	0.236	0.000	0.196	0.447	0.386	0.419#
H_sapiens	0.434	0.333	0.468	0.092	0.098	0.207	0.054	0.151	0.196	0.000	0.390	0.417	0.410#
P_boisei	0.552	0.431	0.456	0.391	0.431	0.431	0.291	0.346	0.447	0.390	0.000	0.151	0.515#
P_robustus	0.553	0.412	0.619	0.373	0.370	0.361	0.412	0.379	0.386	0.417	0.151	0.000	0.644#
Pan_troglodytes	0.304	0.296	0.155	0.303	0.352	0.352	0.243	0.305	0.419	0.410	0.515	0.644	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdist_pl)#
cat("...DONE\n")#
########################################################
# Make some plots#
########################################################
Wood_2016_Fig1_order = c("P_robustus", "P_boisei", "H_rudolfensis", "H_habilis", "H_neanderthalensis", "H_ergaster", "H_sapiens", "H_heidelbergensis", "H_erectus", "A_africanus", "Pan_troglodytes",  "Gorilla_gorilla", "A_afarensis")#
Wood_2016_Fig1_order_nums = match(x=Wood_2016_Fig1_order, table=rownames(res$bdist_cor_Ps))#
new_order=Wood_2016_Fig1_order_nums#
#
# Different orderings of taxa#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap")#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL)#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums)#
heatmap(t(res$cormat))#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap", toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL, toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums, toplabels=TRUE)
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap", toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL, toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums, toplabels=TRUE)
?mtext
?par
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap", toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL, toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums, toplabels=TRUE)
library(vegan)
?metaMDS
library(vegan)#
dists = as.dist(res$bdist_dij)
dists
res$bdist_dij
data(dune)#
# Global NMDS using monoMDS#
sol <- metaMDS(dune)#
sol#
plot(sol, type="t")
sol <- metaMDS(dune, previous.best = sol)#
## Local NMDS and stress 2 of monoMDS#
sol2 <- metaMDS(dune, model = "local", stress=2)#
sol2#
## Use Arrhenius exponent 'z' as a binary dissimilarity measure#
sol <- metaMDS(dune, distfun = betadiver, distance = "z")#
sol
library(vegan)#
dists = as.dist(res$bdist_dij)#
mds_result = metaMDS(comm=dists, k=3)#
plot(mds_result, type="t")
princomp()
?princomp
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
biplot(pc)#
library(rgl)#
plot3d(pc$scores[,1:3])
?plot3d
names(res$bdist_dij)
genera = c("Australopithecus",#
"Australopithecus",#
"Gorilla",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Paranthropus",#
"Paranthropus",#
"Pan")#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
biplot(pc, col=genera)
biplot(pc, col=as.factor(genera))
colors
colors(4)
genera = c("Australopithecus",#
"Australopithecus",#
"Gorilla",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Paranthropus",#
"Paranthropus",#
"Pan")#
colors = c("blue",#
"blue",#
"darkgreen",#
"red",#
"red",#
"red",#
"red",#
"red",#
"red",#
"red",#
"black",#
"black",#
"green")#
#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
biplot(pc, col=colors)#
library(rgl)#
plot3d(pc$scores[,1:3], col=colors)
plot3d(pc$scores[,1:3], col=colors, pch=5)
plot3d(pc$scores[,1:3], col=colors, cex=5)
?plot3d
plot3d(pc$scores[,1:3], col=colors, size=5)
plot3d(pc$scores[,1:3], col=colors, size=15)
enera = c("Australopithecus",#
"Australopithecus",#
"Gorilla",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Homo",#
"Paranthropus",#
"Paranthropus",#
"Pan")#
colors = c("blue",#
"blue",#
"green3",#
"red",#
"red",#
"red",#
"red",#
"red",#
"red",#
"red",#
"black",#
"black",#
"green")#
#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
biplot(pc, col=colors)#
library(rgl)#
plot3d(pc$scores[,1:3], col=colors, size=15)
biplot(pc, col=colors)
biplot(pc)
?biplot
plot(pc,type="lines")
pc
class(pc)
plot.princomp
?plot.princomp
pc
names(pc)
pc$loadings
pc$center
pc$sclae
pc$scale
x = biplot(x=pc, var.axes=FALSE, col=colors)#
x
x
pc <- princomp(x=dists, y=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
#points(x=pc$loadings#
x = biplot(x=pc, var.axes=FALSE)
names(pc)
pc$loadings
pc <- princomp(x=dists, y=dists, cor=TRUE, scores=TRUE)
pc
?princomp
eigen(dists)
points(x=eigen$vectors[,1], y=eigen$vectors[,2])
eigen$vectors[,1]
eigen$vectors[,"1"]
eigen$vectors
genera = c("Australopithecus", "Australopithecus", "Gorilla", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Paranthropus", "Paranthropus", "Pan")#
colors = c("blue", "blue", "green3", "red", "red", "red", "red", "red", "red", "red", "black", "black", "green")#
#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
x = biplot(x=pc, var.axes=FALSE)#
ev = eigen(dists)#
points(x=ev$vectors[,1], y=ev$vectors[,2])
genera = c("Australopithecus", "Australopithecus", "Gorilla", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Paranthropus", "Paranthropus", "Pan")#
colors = c("blue", "blue", "green3", "red", "red", "red", "red", "red", "red", "red", "black", "black", "green")#
#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
x = biplot(x=pc, var.axes=FALSE)#
ev = eigen(dists)#
plot(x=ev$vectors[,1], y=ev$vectors[,2])
text()
?text
plot(x=ev$vectors[,1], y=ev$vectors[,2])#
text(x=ev$vectors[,1], y=ev$vectors[,2], labels=species, cex=0.5, col=colors)
species = names(res$bdist_dij)#
genera = c("Australopithecus", "Australopithecus", "Gorilla", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Paranthropus", "Paranthropus", "Pan")#
colors = c("blue", "blue", "green3", "red", "red", "red", "red", "red", "red", "red", "black", "black", "green")#
#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
x = biplot(x=pc, var.axes=FALSE)#
ev = eigen(dists)#
plot(x=ev$vectors[,1], y=ev$vectors[,2])#
text(x=ev$vectors[,1], y=ev$vectors[,2], labels=species, cex=0.5, col=colors)
/drives/GDrive/__github/minbaru/inst/extdata/examples/ex3b_CRSQ_1998_p198_Fig1A_data.txt
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex3b_CRSQ_1998_p198_Fig1A_data.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex3b_CRSQ_1998_p198_Fig1A_data.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]
res = fast_bdist(chardf, alphabetize=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100, printflag=TRUE)#
res
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdistmds_output_txt='	sp1	sp2	sp3	sp4	sp5#
sp1	0.000	0.400	0.600	0.750	0.800#
sp2	0.400	0.000	0.800	1.000	0.600#
sp3	0.600	0.800	0.000	0.750	1.000#
sp4	0.750	1.000	0.750	0.000	0.750#
sp5	0.800	0.600	1.000	0.750	0.000'#
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl#
#
bdists_minbaru - bdists_bdist_pl
res$bdist_d
bdists_bdist_pl
bdistmds_output_txt='	sp1	sp2	sp3	sp4	sp5#
sp1	0.000	0.400	0.600	0.750	0.800#
sp2	0.400	0.000	0.800	1.000	0.600#
sp3	0.600	0.800	0.000	0.750	1.000#
sp4	0.750	1.000	0.750	0.000	0.750#
sp5	0.800	0.600	1.000	0.750	0.000'
bdists_bdist_pl = read.table(textConnection(bdist_pl_output_txt))#
bdists_bdist_pl
? textConnection
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex3b_CRSQ_1998_p198_Fig1A_data.txt")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
fn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex3b_CRSQ_1998_p198_Fig1A_data.txt"#
readres = read_bdist_to_chardf(fn=fn, min_char_relevance=0, min_taxic_relevance=0, correct_numeric_above_10=TRUE, correct_w_get_numstates_per_char=TRUE, return_list=TRUE, alphabetize=TRUE, printflag=TRUE, subset_data=FALSE)#
#
# Extract and subset by completeness (should be done manually)#
chardf = readres$chardf[,readres$taxic_relevance$relTF]#
chardf = chardf[readres$stats_table$include_TF,]#
#chardf = readres$raw_chardf#
#
# chardf#
# keep_taxa_TF = readres$taxic_relevance$TaxicRel_raw >= 0.95#
# chardf = readres$chardf[,keep_taxa_TF]#
# chardf#
res = fast_bdist(chardf, alphabetize=TRUE)#
res = fast_bdist(chardf, alphabetize=TRUE, num_bootstraps=100, printflag=TRUE)#
res#
bdists_minbaru = round(res$bdist_dij, digits=3)#
#
bdistmds_output_txt='	sp1	sp2	sp3	sp4	sp5#
sp1	0.000	0.400	0.600	0.750	0.800#
sp2	0.400	0.000	0.800	1.000	0.600#
sp3	0.600	0.800	0.000	0.750	1.000#
sp4	0.750	1.000	0.750	0.000	0.750#
sp5	0.800	0.600	1.000	0.750	0.000'#
textcon = textConnection(bdistmds_output_txt)#
bdists_bdistmds = read.table(textcon)#
close(textcon)#
bdists_bdistmds#
#
bdists_minbaru - bdists_bdistmds#
#
# Run the test#
expect_identical(object=bdists_minbaru, expected=bdists_bdistmds)#
cat("...DONE\n")
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/example_scripts/"#
setwd(wd)#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
chardf_orig = relevance_res$subtaxa_chardf#
dim(chardf_orig)#
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
# Check for disagreements -- just re-codings I think#
TF = bdist_chardf == chardf#
cbind(bdist_chardf[TF==FALSE], chardf[TF==FALSE])
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/example_scripts/"#
setwd(wd)#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
chardf = relevance_res$subboth_chardf#
dim(chardf)
runslow = TRUE#
resfn = "ex4_Dembo_Matzke_etal_for_bdist_subset_result.Rdata"#
if (runslow)#
	{#
	res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)#
	# Loads to res#
	save(res, file=resfn)#
	} else {#
	# Loads to res#
	load(file=resfn)#
	} # END if (runslow)#
res$bootstrap_freqs_pLT05
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/example_scripts/"#
setwd(wd)#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=TRUE)#
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
runslow = TRUE#
resfn = "ex5_Dembo_Matzke_etal_Character_matrix_v3_simp_result.Rdata"#
if (runslow)#
	{#
	res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)#
	# Loads to res#
	save(res, file=resfn)#
	} else {#
	# Loads to res#
	load(file=resfn)#
	} # END if (runslow)#
res$bootstrap_freqs_pLT05
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
########################################################
# Make some plots#
########################################################
Wood_2016_Fig1_order = c("P_robustus", "P_boisei", "H_rudolfensis", "H_habilis", "H_neanderthalensis", "H_ergaster", "H_sapiens", "H_heidelbergensis", "H_erectus", "A_africanus", "Pan_troglodytes",  "Gorilla_gorilla", "A_afarensis")#
Wood_2016_Fig1_order_nums = match(x=Wood_2016_Fig1_order, table=rownames(res$bdist_cor_Ps))#
new_order=Wood_2016_Fig1_order_nums#
#
# Different orderings of taxa#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap")#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL)#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums)#
heatmap(t(res$cormat))#
#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap", toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL, toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums, toplabels=TRUE)
library(vegan)#
dists = as.dist(res$bdist_dij)#
mds_result = metaMDS(comm=dists, k=3)#
plot(mds_result, type="t")
species = names(res$bdist_dij)#
genera = c("Australopithecus", "Australopithecus", "Gorilla", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Paranthropus", "Paranthropus", "Pan")#
colors = c("blue", "blue", "green3", "red", "red", "red", "red", "red", "red", "red", "black", "black", "green")#
#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
x = biplot(x=pc, var.axes=FALSE)#
ev = eigen(dists)#
plot(x=ev$vectors[,1], y=ev$vectors[,2])#
text(x=ev$vectors[,1], y=ev$vectors[,2], labels=species, cex=0.5, col=colors)#
library(rgl)#
plot3d(pc$scores[,1:3], col=colors, size=15)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/example_scripts/"#
setwd(wd)#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=FALSE)#
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
runslow = TRUE#
resfn = "ex5_Dembo_Matzke_etal_Character_matrix_v3_simp_result_noSubset.Rdata"#
if (runslow)#
	{#
	res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)#
	# Loads to res#
	save(res, file=resfn)#
	} else {#
	# Loads to res#
	load(file=resfn)#
	} # END if (runslow)#
res$bootstrap_freqs_pLT05#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
########################################################
# Make some plots#
########################################################
# Wood_2016_Fig1_order = c("P_robustus", "P_boisei", "H_rudolfensis", "H_habilis", "H_neanderthalensis", "H_ergaster", "H_sapiens", "H_heidelbergensis", "H_erectus", "A_africanus", "Pan_troglodytes",  "Gorilla_gorilla", "A_afarensis")#
# Wood_2016_Fig1_order_nums = match(x=Wood_2016_Fig1_order, table=rownames(res$bdist_cor_Ps))#
# new_order=Wood_2016_Fig1_order_nums#
#
# Different orderings of taxa#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap")#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL)#
#bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums)#
heatmap(t(res$cormat))#
#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap", toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL, toplabels=TRUE)#
#bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums, toplabels=TRUE)#
########################################################
# 3-dimensional Multidimensional Scaling (and plotting)#
########################################################
# metaMDS from the vegan package#
library(vegan)#
dists = as.dist(res$bdist_dij)#
mds_result = metaMDS(comm=dists, k=3)#
plot(mds_result, type="t")
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/example_scripts/"#
setwd(wd)#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=FALSE)#
chardf = relevance_res$subboth_chardf#
dim(chardf)
chardf
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/example_scripts/"#
setwd(wd)#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE)
chars_list
remove_spaces=TRUE; alphabetize=TRUE
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)
# Tests for the "minbaru" package#
library(testthat)#
#
# Code to source#
# For minbaru functions #
source("/drives/GDrive/__github/minbaru/R/read_bdist_v2.R")#
source("/drives/GDrive/__github/minbaru/R/fast_bdist_v1.R")#
source("/drives/GDrive/__github/minbaru/R/bdist_relevance_v1.R")#
#
# for cft()#
source("/drives/Dropbox/_njm/__packages/BioGeoBEARS_setup/BioGeoBEARS_generics_v1.R") #
#
# for get_numstates_per_char()#
source("/drives/GDrive/__github/BEASTmasteR/R/read_nexus_data2_v1.R")#
#
# for list2str_fast() (used in read_nexus_data2_v1.R)#
source("/drives/GDrive/__github/BEASTmasteR/R/basics_v1.R")#
########################################################
# Set the working directory#
########################################################
wd = "/drives/GDrive/__github/minbaru/inst/extdata/example_scripts/"#
setwd(wd)#
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=FALSE)#
chardf = relevance_res$subboth_chardf#
dim(chardf)#
#
runslow = TRUE#
resfn = "ex5_Dembo_Matzke_etal_Character_matrix_v3_simp_result_noSubset.Rdata"#
if (runslow)#
	{#
	res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, num_bootstraps=100, printflag=TRUE)#
	# Loads to res#
	save(res, file=resfn)#
	} else {#
	# Loads to res#
	load(file=resfn)#
	} # END if (runslow)#
res$bootstrap_freqs_pLT05#
#
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru
alphabetize=TRUE; grepl_w_brackets=TRUE; remove_brackets_from_chardf=TRUE; num_bootstraps=100; printflag=TRUE
if (grepl_w_brackets == TRUE)#
		{#
		remove_brackets_from_chardf=TRUE#
		} # END if (grepl_w_brackets == TRUE)#
#
	if (remove_brackets_from_chardf == TRUE)#
		{#
		chardf[!is.na(chardf)] = sapply(X=chardf, FUN=gsub, pattern="\\{", replacement="")#
		chardf[!is.na(chardf)] = sapply(X=chardf, FUN=gsub, pattern="\\}", replacement="")#
		chardf[!is.na(chardf)] = sapply(X=chardf, FUN=gsub, pattern="\\(", replacement="")#
		chardf[!is.na(chardf)] = sapply(X=chardf, FUN=gsub, pattern="\\)", replacement="")#
		} # END if (remove_brackets_from_chardf == TRUE)
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0.75, min_taxic_relevance=0.4, alphabetize=TRUE, subset_data=FALSE)#
chardf = relevance_res$subboth_chardf#
dim(chardf)
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0, min_taxic_relevance=0, alphabetize=TRUE, subset_data=FALSE)#
chardf = relevance_res$subboth_chardf#
dim(chardf)
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0, min_taxic_relevance=0, alphabetize=TRUE, subset_data=FALSE)#
chardf = relevance_res$chardf#
dim(chardf)
cat("TESTING THAT STANDARD (LITERAL) BDIST CALCULATIONS WORK...ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex")#
# Read in an example file, correcting it to standard#
# character representation (as e.g. from NEXUS)#
# Have to have a cutoff of e.g. 0.95 to match bdist.pl defaults#
nexfn = "/drives/GDrive/__github/minbaru/inst/extdata/examples/ex5_Dembo_Matzke_etal_Character_matrix_v3_simp.nex"#
#
chars_list = read_nexus_data2(file=nexfn, check_ambig_chars=TRUE, convert_ambiguous_to=NULL, printall="short", convert_ambiguous_to_IUPAC=FALSE) #
#
chardf = fix_NEXUS_charslist_for_bdist(chars_list=chars_list, remove_spaces=TRUE, alphabetize=TRUE)#
#
# Extract and subset by completeness (should be done manually)#
dim(chardf)#
relevance_res = bdist_relevance(chardf=chardf, min_char_relevance=0, min_taxic_relevance=0, alphabetize=TRUE, subset_data=FALSE)#
chardf = relevance_res$chardf#
dim(chardf)
runslow = TRUE#
resfn = "ex5_Dembo_Matzke_etal_Character_matrix_v3_simp_result_noSubset.Rdata"#
if (runslow)#
	{#
	#alphabetize=TRUE; grepl_w_brackets=TRUE; remove_brackets_from_chardf=TRUE; num_bootstraps=100; printflag=TRUE#
	res = fast_bdist(chardf, alphabetize=TRUE, grepl_w_brackets=TRUE, remove_brackets_from_chardf=TRUE, num_bootstraps=100, printflag=TRUE)#
	# Loads to res#
	save(res, file=resfn)#
	} else {#
	# Loads to res#
	load(file=resfn)#
	} # END if (runslow)
res$bootstrap_freqs_pLT05
bdists_minbaru = round(res$bdist_dij, digits=3)#
bdists_minbaru#
########################################################
# Make some plots#
########################################################
# Wood_2016_Fig1_order = c("P_robustus", "P_boisei", "H_rudolfensis", "H_habilis", "H_neanderthalensis", "H_ergaster", "H_sapiens", "H_heidelbergensis", "H_erectus", "A_africanus", "Pan_troglodytes",  "Gorilla_gorilla", "A_afarensis")#
# Wood_2016_Fig1_order_nums = match(x=Wood_2016_Fig1_order, table=rownames(res$bdist_cor_Ps))#
# new_order=Wood_2016_Fig1_order_nums#
#
# Different orderings of taxa#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap")#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL)#
#bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums)#
heatmap(t(res$cormat))#
#
bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order="heatmap", toplabels=TRUE)#
bds_bootstrap_plot(res, taxon_to_order_on="H_sapiens", new_order=NULL, toplabels=TRUE)#
#bds_bootstrap_plot(res, taxon_to_order_on=NULL, new_order=Wood_2016_Fig1_order_nums, toplabels=TRUE)
library(vegan)#
dists = as.dist(res$bdist_dij)#
mds_result = metaMDS(comm=dists, k=3)#
plot(mds_result, type="t")
species = names(res$bdist_dij)#
genera = c("Australopithecus", "Australopithecus", "Gorilla", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Homo", "Paranthropus", "Paranthropus", "Pan")#
colors = c("blue", "blue", "green3", "red", "red", "red", "red", "red", "red", "red", "black", "black", "green")#
#
pc <- princomp(x=dists, cor=TRUE, scores=TRUE)#
summary(pc)#
plot(pc,type="lines")#
x = biplot(x=pc, var.axes=FALSE)#
ev = eigen(dists)
plot(x=ev$vectors[,1], y=ev$vectors[,2])#
text(x=ev$vectors[,1], y=ev$vectors[,2], labels=species, cex=0.5, col=colors)
library(rgl)#
plot3d(pc$scores[,1:3], col=colors, size=15)
